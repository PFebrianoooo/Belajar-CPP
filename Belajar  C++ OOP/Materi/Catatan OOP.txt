// OOP -1 starts //
Pendahuluan

Object oriented programming
apa itu object oriented programming ?

object oriented adalah sebuah metode dimana mengelompokan objek kedalam suatu kelas.

dimana object oriented programming berfunhgsi uuntuk membuat program yang lebih kompleks dnegan menggabungkan variable variable fungsi fungsi data data kedalam satu loyang yang disebut dengan kelas.

class Mahasiswa {
	string Nama;
	string Nim;
	string jurusan;

	void RubahNama(){
	}
}

jadi intinya object oriented programming adalah sebuah method untuk menggabungkan semua data-data , fungsi-fungsi kedalam suatu tipe yang dinamakan dengan kelas.

apabila di c++ dasar kita menggunakan basic program struktural, sedangkan di OOP kita menggunakan object atau pengelompokan kedalm suatu loyang yang dinamakan dengan class

// OOP -1 ends //

// OOP -2 starts //
setup windows menggunakan visual studio code

step by step
1. membuat folder utama dan diisi oleh 2 folder untuk source code dan hasil compilenya.
2. membuat file bebas namanya dengan extension file .cpp ditaruh di file source code.
3. setup visual studio code menggunakan c\c++ edit configuration json dengan ctrl+shift+p lalu save
3. setup visual studio code dengan membuat folder tasks.json di file vs code dan mensetup file mulai dari compile sampai run c++
4. menulis code di file source code dan click ctrl+shift+p untuk mengcompile file dan mendapatkan hasil berupa file compile nya

setelah mengikuti langkah-langkah harusnya visual studio code sudah bisa di jalankan untuk menulis code c++

// OOP -2 ends //

// OOP -3 starts //
Pengenalan Kelas Dan Object

init
class Mahasiswa {
	public:
		string nama;      // data member
		string jurusan;
		string nilai;
	private:
		string ipk;
		char grade;
	protected:

}

class adalah loyang atau template dimana dapat menyimpan berupa 
1. data member atau attribute atau data
2. member function atau method atau fungsi


pengaksesan kelas / access modifier:
1. Public
2. Privat
3. Protected


1. Public 
dapat diakses oleh siapapun diluar kelas 
2. privat 
hanya dapat diakses oleh didalam kelas
3. protected
hanya dapat diakses oleh kelas me inherit kelas ini dan didalam kelas itu sendiri.

// OOP -3 ends //

// OOP -4 starts //
constructor.

fungsi yang pertama kali diakses oleh objek dan biasanya constructor digunakan untuk menginialisasi sebuha variable public, private dan protected.

initialisation

class Mahasiswa {

public :
	string Nama;
	string Nim;

		
	// constructor
Mahasiswa (string Nama, string Nim){
	Mahasiswa::Nama = Nama;
	Mahasiswa::Nim = Nim;

	cout << Nama << endl;
	cout << Nim << endl;


	}


};

constructor biasanya digunakan untuk
1. tempat inisialisasi data member.

// OOP -4 ends //

// OOP -5 starts //
Member function atau method

member function atau method berisi fungsi-fungsi untuk mengoperasikan objek sesuai yang dimau oleh user. biasanya berisi fungsi-fungsi untuk CRUD pada objek

method dibagi menjadi 4
1. Tanpa Parameter dan tanpa return.
2. Dengan parameter tanpa return.
3. Tanpa parameter dengan return.
4. dengan parameter dan return


> 1. Tanpa Parameter dan tanpa return.
biasanya hanya mendisplaykan saja 

void TampilData(){
	cout << Mahasiswa::Nama << endl;
	cout << Mahasiswa::Nim << endl;
	cout << Mahasiswa::Jurusan << endl;
}

> 2. Dengan parameter tanpa return
void UbahData (const char* Nama, const double Ipk){
mahasiswa::Nama = Nama;
Mahasiswa::Ipk = Ipk;
}

> 3. Tanpa parameter dengan return
string AmbilNama (){
return Mahasiswa::nama;
}

> 4. Dengan Parameter dan return
biasanya menggunakan operator
string (const char* &Nlai, const char* Nim){
return mahasiswa::nim + Nim;
return Mahasiswa::Nilai + Nlai;
}

// OOP -5 ends //

// OOP -6 starts //
latihan membuat Dbase dengan konsep create dan read.

// OOP -6 ends //

// OOP -7 starts //
berbagai cara menulis class dan alokasi memory

memory pada c++ dibagi menjadi 2 
1. heap memory
2. stack memory

1. pada heap memory perlu pointer untuk mengaksesnya
2. pada stack emory tidak perlu pointer untuk mengaksesnya

4 cara menulis dengan class
selengkapnya pada syntax

// OOP -7 ends //

// OOP -8 starts //
Memory dan adress dari object

Memory 
memory dari sebuah kelas tergantung daripada ukuran dari data membernya atau atribute yang di deklarasikan didalam kelas mengecualikan semua fungsi yang di deklarasikan di bawahnya.

dibagi menjadi 2 
1. Stack Memory
2. Heap Memory

1. stack memory
Apabila di deklarasika 5 tipe data makan penempatan tipe data yang pertama paling bawah sesuai dengan struktur data dan algoritma dengan prinsip LIFO. apabila di deklarasikan fungsi maka mengisi alokasi memory setelahnya dan ssetiap selesai maka meory nya akan di release atau di hapus.

Stack memory itu terbatas

2. Heap Memory
Heap Memory Atau Disebut dengan free memory.

untuk menulis memory ke heap menggunakan keyword new.

// OOP -8 ends //

// OOP -9 starts //
Destructor and object lifetime

destructor adalah saat mwnjalankan fungsi constructor selesai maka menjalankan fungsi destructor untuk menghapus runag di memory agar tidak terjadi memory leak

destructoor adalah sebuah fungsi yang digunakan untuk mengahpus ruang di memory dimanaa dalam peng aksesannya menggunakan pinter secara langsung

intitialisation

~classname(){
// args

}

contoh kasus

player *Object1;
Object1 = new player("andi");
delete Object1;

contoh diatas merupakan cara menghapus alokasi memory dengan menngunakan perintah delete.

// OOP -9 ends //

// OOP -10 starts //
Namespace vs this

nameespace digunakan untuk pemberian refers kepada prototype fungsi sedangkan this digunakan untuk pemeberian refers kepada kelas.

contoh
class Mahasiswa {
	public :
	string nama;
	string nim;
	string nilai;

	Mahasiswa(const char * nama, const char * nim , const char * nilai){
		this->nama = nama;
		thid->nim = nim;
		this->nilai = nilai;
		
};

namesapce ruangan {
	class Mahasiswa 
	{
		public :
		string nilai ;
		string nim;
		string nama;
		
		Mahasiswa(const char *nilai , const char *nim , const char *nama)
			{
			this->nilai = nilai;
			this->nim = nim;
			this->nama = nama;
			}	

		void TampilNama()
			{
			cout << this->nim << endl;
			cout << this->nama << endl;
			cout << this->nilai << endl;
			}
		string GetNama (const char* nama)
			{
			return this->nama;
			}				
        };
	


};


main (){

	
	Mahasiswa* Object1;
	Object1 = new Mahasiswa("otong","2204070039","90");
	cout << Object1->nama << endl;
	cout << Object1->nim << endl;
	cout << Object->nilai << endl;

Ruangan::Mahasiswa* Object2;
	Object2 = new Ruangan::Mahasiswa("otong","2204070039","90");
	Object->TampilNama();
}

arrow function digunakan sebagai pengganti :: pada namespace atau object dan this digunakan untuk merefers kelas

// OOP -10 ends //

// OOP -11 starts //
prototype fungsi.

prototype fungsi adalah penjabaran dari method atau member function dengan menjabarkan isi dari method i bawah atau di file header untuk mempersingkat syntax pada source code main

prototype fungsi di OOP hammpir sama dengan prototype pada C++ Dasar perbedaanya adalah harus me reversing class yang mau di prototype-kan fungsinya.

Contoh Penggunaan 

class Mahasiswa {
	public :
	string nama;
	string nim;
	string nilai;

	Mahasiswa(const char * nama, const char * nim , const char * nilai){
		this->nama = nama;
		thid->nim = nim;
		this->nilai = nilai;

	void TampilData();
	string GetNama(const char *nama);
};


// prototype fungsinya

void Mahasiswa::TampilData()
		{
		cout << this->nim << endl;
		cout << this->nama << endl;
		cout << this->nilai << endl;
		}
string Mahasiswa::GetNama(const char * nama)
		{
		return this->nama ;
		}

// OOP -11 ends //
// OOP -12 starts // 
multifile programs

sama halnya dengan multifile pada c++ dasar tetapi patut di perhatikan
1. penulisan include pada file dengan #include "nama header"

2. tasks.json
hampir sama pada tasks.json sebelummnya tetapi di multifile perlu adanya compile per file apabila file c++ dan meng combine stiap file yang di compile per file dan menggabngkannya

"label" : "compile an every file",
"type" : "shell",
"command" : "g++",
"args" : [
"-std=c++17",
"${file}",
"-c",
"-o",
".\\nama file objek\\${fileBasenameNoExtension}.o"

"label" : "combine all file",
"type" : "shell",
"command" : "g++",
"args" : [
"-std=c++17",
".\\nama file objeck\*.o",
"-o",
".\\nama file objek\\main.exe"

"label" : "compile an every file",
"type" : "shell",
"command" : ".\\fileobjek\\main.exe",
"depends-on" : ["combine all file"]
"group":[
"kind" :"build",
"is-default": true
]


3. penulisan preprocessing directive dengan 
ifndef __PLAYER
#define __PLAYER
endif
sebagai guard untuk tidak di deefiisikan secara berulang lagi

// OOP -12 Ends //

// OOP -13 starts //
public private acess class

public : dapat diakses oleh semua tempat
private : hanya dapat diakses oleh kelas itu sendiri 

class NamaKelas {
	// attributes
	public :

	// args

	private :
	
	// args
	
	// member function	

	public :
	
	// args 
	
	private :
	
	// args 
	
};

diatas adalah template acces modifier untuk priblic dan orivate keyword.

// OOP -13 ends //

// OOP -14 starts //

getter and setter (Encapsulasi)
getter and setter adalah menyimpan sebuah data kedalam class dimana hanya dapat di fungsikan dengan mendapatkan data atau get data atau set data yang dilakukan di belakang layar.

getter mengambil sebuah data;
setter mengeset sebuah data yang dilakukan di belakang layar 

// OOP -14 ends //

// OOP -15 starts //
latihan encapsulasi

// OOP -15 ends //

// OOP -16 starts //
Default assingnment

default asignment adalah sebuah operator yang akan di jalankan meskipun tidak diisi oleh parameter.

walaupun dalam parameter tidak ada yang di inoutkan atau di parameterkan maka akan menjalankan fungsi default tersebut

misalkan

constructor (const char * name = "bandu"){
this->name = name ;
}

main(){
constuctor();
}

maka hasil display yang output adalah bandu walaupun tidak di inputkan karakter di dalam kurungnya.

salah satu kelebihan default asignment adalah ketika di compile tidak error padahal belum di inpputkan isinya.

// OOP -16 ends //

// OOP -17 starts //
const objek dan member function

const figunakan untuk mengkonstankan atau mengunci sebuah attribut objek agar tidak bisa dirubah attributnya

1. objek yang konstan makan bisa di panggil atau dapat menggunakan method yang konstan juga
2. objek yang tidak konstan maka dapat memanggil semua atau seluruh fungsi atau method

initialisation

// untuk di objek 
const Player player2 = Player("Banteng_Betawi");

// untuk di fungsi atau method
void Display() const
{
	cout << "Nama Player adalah " << this->Nama << endl;
}


// OOP -17 ends //

// OOP -18 starts //
Friend function

friend fuunction adalah fungsi dimana dapat mengakses bagian dari sebuah kelas dengan meng inherit kelas. 
friend adalah sebuah keyword untuk function yang nantinya akan bisa mengakses attributes private.

deklarasi friend function bisa di lakukan di dalam kelas atau diluar kelas

selengkapny pada syntax
// OOP -18 ends //

// OOP -19 starts //
friend class 

friend class adalah cara passing attributes atau fungsi dengan mendefinisikan kelas yang mau di passingkan nilainya diatas attribut kelas yang mau di passing.

hasilnya friend class dapat mengakses seluruh resource dari kelas yang mendeklarasikannya termasuk attribut dan fungsi fungsi didalamnya.

friend class hanya berlaku 1 arah.


initialisation.

class Map{
friend class Player;
	private:
	int Coordinates;
	public:
	void coordinates(const Player &obj){
	// contoh passing parfameter.
	cout << coordinates << obj.health <<  endl;

};

class Player {
	
private:
int health;
string name;

public:
void Display (){
// args
}

};
// OOP -19 ends //

// OOP -20 starts //
this vs cascading function calls

cascading function calls adalah cara pembuatan fungsi dengan jauh lebih practical menggunakan cascading function calls. yaitu bisa menumpuk fungsi fungsi dengan menggunaka comma operator.

intitialistation

Player& SetNamaDepan(const char * depan){
	this->NamaDepan = depan;
	return *this;
}

dengan menggunakan cascading function calls source code jauh lebih sederhana dan juga lebih ringkas penggunaannya.


// OOP -20 ends //

// OOP -21 starts //
static class member

static class member adalah sebuah attribut statis dimana hidupnya di level kelas.

di deklarasikan didalam kelas

static TipeaData Namavar
ex : static int count;

penjabaran diluar kelas 
int NamaKelas Nama = isinya atau args

bisa digunakan untuk menghitung jumlah daripada objek objek yang hidup.

// OOP -21 ends //