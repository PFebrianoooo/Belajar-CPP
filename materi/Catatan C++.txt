belajar c++ [ dasar ]
channel youtube kelas terbuka materi belajar c++

// dasar -3 starts //
#include <iostream> *header*
dinamakan include berfungsi untuk mengcopy semua yang ada di file dan langsung ditaruh di iostream itu sendiri.
dimana iostream berisi input output dimana akan di alirkan dan di tampilkan pada cmd

yang tidak akan di eksekusi 
1. line kosongdev
2. komentar (//)
3. multi line comment (/* ........ */)

main (){}
berfungsi dimana mesinn pertama kali mencari yang pertama kali di eksekusi diibaratkan pintu pada rumah

int main (){} pasangannya return 0; merupakan fungsi
int fungsi 
cout fungsi output

std::....
standard liblary dari iostream

endl
akhir spasi kebawah seperti \n
// dasar -3 end //

// dasar -4 starts //
penjelasan reprocessing linking and compiling.

compiling : file.exe

alurnya:
syntax/source code > reprocessing > compiling
untuk hanya 1 file

alurnya:
syntax/source code di compile masing-masing (reprocessing) > linking (menggambungkan setiap source code yang sudah di reprocessing seblumnya) > compiling (hasil compile smemua file)
// dasar -4 end //

// dasar -5 starts //
menggunakan aplikasi code blocks
mereview ulang cara compile link and reprocessing 
untuk penggunaan aplkasi sublime text, vs code ide 
untuk penggunaan dev c++ pada aplikasi diatas perlu, tetapi untuk penggunaan langsung menggunakan dev c++ biasa tidak. karena ,pada dev c++ biasa langsung otomatis di compiile and run secara langsung
// dasar -5 end // 

// dasar -6 start // 
int main (){
std::cout << "halo dunia" << std::end;
std::cin.get();
}
nb:
std berasal dari iostream
:: mengambil fungsi dari cout
<< "halo dunia" insertion memasukkan ke cout\
<< std::endl; insertion memasukkan ke hello dunia endl ( akhir dari baris )
std::cin untuk menginputkan
get(); untuk mengambil enter pada keyboard
return 0; untuk membuktikan ada error di syntax
"" diberi nama string atau text yang bisa di tampilkan ke cout
// dasar -6 end //

// dasar -7 starts //
menaruh apapun kedalam huruf atau kelas.
cara inialisasi.
tipe data , diikuti variabel.
contoh: int x; atau short x = 10;
cara deklarasi.
int i, int x int y short y dsb
// dasar -7 ends //

// dasar -8 starts //
fungsi using namespace std;
tidak perlu menulis std:: pada console
penulisan console cin atau cout.
cin >> ....;
cout << .....;
cara membaca cin kita masukkan data kedalam ....
// dasar -8 ends //

// dasar -9 starts //
tipe data.
tope data merupakan hal yang mendasar dalam c++ untuk mendeklarasikan variabel agar dibaca oleh komputer.
1 byte = 8 bit.
jumlah data yang bisa di tampung tipe data

macam - macam tipe data:
fundamental
1. short (16 bit)
2. int (32 bit) unsign (untuk meniadakan negatif)
3. long (64 bit)
ketiga diatas merupakan untuk bilangan bulat.
1. float ()
2. double ()
kedua diatas untuk bilangan berkoma atau decimal
1. char (8 bit)
diatas merupakan untuk bilangan berkarakter
1. boolean (1 byte)
diatas merupakan tipe data untuk menyatakan true atau false.

kumpulan karakter
1. string 
merupakan tipe data untuk kumpulan karakter 
// dasar -9 ends //

// dasar -10 starts //
untuk hasil dari opersi aritmatika agar menjadi koma memori yang ditaro salah satunya harus bertipe data float
dan modulus tidak bisa menggabungkan 2 tipe data
// dasar -10 ends //

// dasar -11 starts //
komparasi atau membandingkan 2 nilai baik sama dengan, kurang dari, lebih dari ,kurang dari sama dengan, lebih dari sama dengan, serta tidak sebanding
// dasar -11 ends //

// dasar -12 starts //
operator logika adalah operator yang di gunakan pada syntax 
not or and.
not (!)
menegasikan atau melawan.
and (&&)
kedua nilai yang benar hasilkan true
or (||)
salah satu nilainya true maka hasilnya true

NB 
untuk lebih jelas mengenai operator logika bisa pelajari materi aljabar boolean
// dasar -12 ends //

// dasar -13 starts //
if (kondisi){
statement
}

jika kondisi terpenuhi maka akan dijalankan statmentnya.
apabila kondisi tidak terpenuhi maka langsung menuju ke statment selanjutnya diluar if .
// dasar -13 ends //
// dasar -14 starts //
if else statement 
if (kondisi){
statement
} else {
statemnet
}

jika kondisi if terpenuhi maka else tidak di eksekusi.
jika kondisi if tidak terpenuhi maka dilanjutkan ke statment else.
// dasar -14 ends //

// dasar -15 starts //
switch case 
switch (kondisi/variable){
case 1: {
statement
break;
}
case 2: {
statement
break;
}

sama halnya dengan kondisi if else tetapi pada switch case mrubah kondisi / variable dengan bberapa case / kasus.
tanpa ada break semua case atau kasus akan di eksekusi 
fungsi break ialah untuk memberhentikan pada case yang terpenuhi dan mengabaikan case - case yang ada.
// dasar -15 ends //

// dasar -16 starts //
membuat kalkulator sederhana (selesai).
ubah menggunakan switch case.
// dasar -16 ends //

// dasar -17 stats //
assigment operator
mempermudah penulisan syntax yang pada awal mula
a = a + 3 ;
menjadi
a += 3 ;
a -= 3 ;
a /= 3 ;
a %= 3 ;
a *= 3 ;
// dasar -17 ends //

// dasar -18 starts //
increment dan decrement
increment 
pre dan post increment 
yang sebelumnya a = a + 1 disederhanakan menjadi a++ peningkatannya adalah 1 nilai
a++ = post increment (dibelakangnya) nambah 1 nilai
++a = pre incrememt (didepannya) nambah 1 nilai
increment apabila didalam fungsi maka 
post incremement
cout << a++ << endl; (di print dulu di a baru di tambahkan)
cout << a << endl; (ngeprint hasil fungsi diatas)
pre decrement 
cout << ++a << endl; (di tambahkan dulu baru di print a nya)
cout << a << endl; (di print hasil fungsi diatas)
decrement 
a--
--a
penjelasan mengenai decrement kebalikan dari incrment
// dasar -18 ends //

// dasar -19 stars //
while (syarat){aksi/syntax}
syarat dalam bentuk yes atau no dalam bentuk boolean
akan selalu looping apabila syarat selalu true(yes). maka perlu adanya batasan untuk membatasi loopingnya (no)
ada kemingkinan apabila syarat tidak terpenuhi maka tidak ada aksi yang dilakukan.
// dasar -19 ends //

// dasar -20 starts //
do while loop
do {aksi} while (syarat);
cara eksekusinya melakukan aksi akan dilakukan minimal 1 kali dulu baru di cek syaratnya
kesimpulannya:
bahwa do while apabila syaratnya sudah terpenuhi maka looping terus apabila syaratnya tidak terpenuhi maka tetep ngeprint yang di aksikan sebelumnya pada while minimal 1 kali.
// dasar -20 ends //

// dasar -21 starts //
for loop 
for (inisialisasi; loop kondisi; increment) {aksinya}
// dasr -21 ends //

// dasar -22 starts //
break and continue 
break digunakan untuk selesaikan program artinya tidak di lanjut ke fungsi selanjutnya dalam arti mudah bahwa break adalah memberhentikan pada suatu kondisi misalnya if ataupun for ;
continue digunakan melanjutkan dengan men skip suatu kondisi baik loop ataupun fungsi lainnya sperti if ataupun for.

jika i ++ di taruh ssetelah kondisi yang membuat dia berhenti maka fungsi akan berhenti pada kondisi if ;
jika idtaruh diatas maka akan melajutkan program tetapi men skip suatu syaratnya.
hati hati continue didalam while
// dasar -22 end //

// dasar -23 starts //
latihan deret fibonacci
menggunakan do while loop bisa
menggunakan for juga bisa
inisialisasi dari belakang .
ikutil flow dari rumus fn
// dasar -23 ends //

// dasar -24 stars //
latihan membuat segitiga siku-siku
// dasar -24 ends //

// dasar -25 starts //
latihan membuat segitiga sama kaki
// dsar -25 ends // 

// dasar -26 starts //
fungsi/fungction/method
y        =      f(x)       =         x+5
input          fungsi               output
dry = dont repeaet yourself 
jangan terus mengullang sesuatu yang sama terus menerus
standard liblary 
iostream 
*mendisplay input output dan tampilakan
cmath
*standard liblary untuk operas matematika sin cos tan tangen

#include <cmath>
standard  liblarynya

ceil(x) = pembulatan kedatas
cos (x) = cos x
exp (x) = exponen
fabs (x) = nilai absolut dalam float
floor (x) = pembulatan keatas
fmod (x) = modulus dalam float
log (x) = logaritma dengan basisi natural
log10 (x) = logaritma dengan basis 10
pow (x,y) = x panggkat y
sin (x) = sinus
sqrt (x) = akar kuadrat
tan (x)  = tangen

// dasar -26 ends //

// dasar -27 starts //
menggunakan standar liblary 
#include <cstdlib>
pemanggilan di syntax rand()
*menghasilkan apapun yang random sesuai permintaan user 

bisa digunakan untuk pembuatan menu  yes atau no questtions
// dasar -27 ends //

// dasar -28 starts //
fungsi dengan pengenbalian

tipedata nama_fungsi (input) {
perhitungan;
statment;

return hasil;
}

untuk hasil perhitungan/body dikembalikan ke tipe data menggunakan return hasil; 
fungsi pengembalian disebut juga dengan reporter
dapat digunakkan kembali tanpa menulis fungsi lagi didalam statment 

// dasar -28 ends //

// dasar -29 starts //
void 
fungsi tanpa pengembalian

void adalah suatu tipe data yang artinya ksosong
void disebut juga dnegan worker

penulisan:
void nama_fungsi (input){

}

// dasar -29 ends //

// dasar -30 starts //
latihan mencari luas dn keliling persegi panjanga denngan void da fungsi pengembalian
// dasar -30 ends //

// dasar -31 starts //
prototype fungsi

pendeklararaisan diatas line main untuk mendeklarsikan diatasnya sedangkan untuk penjabarannya ada di bawahnya 
cara pendeklariasian dengan mengambil header fungsinya saja

dapat digunakan pada program multifile
// dasar -32 ends //

// dasar -33 starts //
scope variable (global , lokal dan block)

variable global
variable yang dapat berlaku untuk setiap fungsi atau statement yang ditulis setelah line variable global

variable lokal
variable lokal adalah variable yang berlaku hanya pada saat didalam fungsi atau statement, variable yang tidak akan menggangu variable globalnya

variable block 
variable yang ada didalam pada fungsi didalam fungsi.

cout << "memanggil variable terjauh atau global " << ::x << endl;
// dasar -33 ends //

// dasar -34 starts //
default argument pada fungsi

default argument adalah nilai standar pada fungsi pendefinisian argumen default di taruh pada default argumrnt pada prototype fungsi dan default argument mengisi argument pada setiap input pada argument. dapat diisi semua inputnya
// dasar -34 ends //

// dasar -35 starts //
overloading sebuah fungsi
// basic function
statment utama

// overloading function
statement pembantu

menimpa sebuah fungsi pada fungsi yang sudah ada untuk si input dapat memilih mana yang cocok untuk si inputannya

// dasar -35 ends //

// dasar -36 starts //
fungsi rekursif
berasal dari bahasa inggris recurtion yang berarti pengulangan
dalam artian rekursif berarti yang dapat memanggil dirinya sendiri

finit rekursif
finit rekursif adalah rekursif terbatas maksudnya adalah main nya akan sampai di akhir atau terbatas
 
untuk pembatasannya dan rekaursifnya menggunakan if dan else

rekursif harus ada batasnya/terminasi , apabila tidak ada batasnya/terminasinya maka recursive nya tidak terbatas endingnya error.  

// dasar -36 ends //

// dasar -37 starts //
latihan fungsi rekursif 
untuk penggunaan fungsi rekursif pada fibonacci tidak diasarankan karena pada fungsi dapat bercabang pada fungsi rekursifnya
dan apabila dipanggil nilai deret yang banyak akan membutuhkan waktu yang lama untuk mendapatkan hasilnya

iterasi: di hitung pada saat itu juga menggunakan rumus.
// dasar -37 ends //

// dasar -38 starts //
pointer
pointer adalah memory dimana apabila kita menddeklarasikan sesuatu minalnya int a = 5 maka si a nya punya alamat memorynya sendiri dan untuk memanggilnya kita perlu mengakses memory a nya dilakukan oleh sistem.

cara mengetahui adress dari nilai atau sesuatu pointernya/memorynya '&'

cara deklarasi atau membuat nama alias untuk alokasi memory pada pointer
int a*nama_adress = &a

kenapa tipedata nya integer? karena alokasi memory pada int yaity 4 byte

defrencing adalah mengambil niali dari pointer

pointer dapat bekerja dengan maksimal dengan digabungkan oleh fungsi
// dasar -38 ends //

// dasar -39 starts //
reference 

reference adalah nama alias atau nama lain untuk sebyah vaariabel yang sudah ada 

tata cara penulisan 

tipe data &variable = variable yang ingin di referencekan
// dasar -39 ends // 

// dasar -40 starts //
fungsi dengan pointer
3 fungsi dengan pointer
1. fungsi yang memasukkan nilai ke dalamnya
2. fungsi yang memasukan pointer ke dalamnya 
3. fungsi yang memasukkan reference ke dalamnya

pada saat memeanggil fungsi yang digunakan adalah adressnya dengan (&)
// dasar -40 ends //

// dasar -41 starts //
fungsi dengan reference

perbedaanya adalah pada saat input pada fungsi yaitu menggunakan & saja dan pada prototype juga tidak menampilkan variable setelah & 

lebih mudah menggunakan reference dnegan fungsi keitmbang menggunakan fungsi dengan pointer.
// dasar -41 ends //

// dasar -42 starts //
array pendaluan
array adalah kunpulan data yang dimulai dari index 0 s/d yang diinginkan

adress array berurutan

misalkan diinginkan 5 buah member array maka :
array [4] = {isinya array tsb}

sizeof 
mengetahui nilai dari sesuatu size of berasal dari standard liblary dari iostream

kekurangan array pada c++

tidak bisa membaca nilai - nilai umum pada pemerograman lain
1. misalkan pada member array
2. tidak bisa mengurutkan secara langsung
3. menentukan nilali maks dan min

makanya ada algoritma untuk menurutkan array menentukan nilai min maks dan lain lain
// dasar -42 ends //

// dasar -43 starts //
array standard liblary
#include <array>

tata cara penulisan array dengan standard liblary
array < tipedata , jumlah array > nama array = {isi arraynya, isi arraynya, ...}

array sangat berteman dengan looping

standard liblary array
size() = menentukan ukkuran daripada array
begin() = menentukan nilai awal dari array
end() = menetukan nilai akhir dari array
at (?) = menetukan isi array posisi keberapa 

namun penggunaan standad liblary ini tidak bisa dipakai untuk devc++ standard harus menggunakan visual studo code ide atau code blocks
// dasar -43 ends //

// dasar -44 starts //
latihan array 
diberikan latihan array untuk menetukan sebaran nilai dan grafik setiap nilai yang diberikan
perlu mengulang vide0 sampai 4-5 kali untuk faham dengan konsep daripada latihan.
// dasar -44 ends //

// dasar -45 starts //
looping array
pada array standar bawaan cpp, bukan berasal dari array bukan dari standard liblary kita tidak tahu batas akhirnya berapa dan itu sebuah masalah

tata cara penulisan
for (deklarasi variableBaru ; array){ statement nya }

ex : int array [10] = {1,2,3,4,5,6,7,8,9,10}

for ( int nilai : arraynya ){
cout << nilai << endl;
}

lebih fleksibel dan lebih mudah ketimbang menggunakan array standard liblary
apabila ditambahkan variable baru maka tidak berpengaruh dan akan selalu menujuk ke array utama (tidak merubah apapun)

pada looping array ini dapat digunakan untuk looping array tipe standard liblary dan juga digunakan pada standard bawaan array pada c++

untuk merubah array 
tata cara penulisan

for (int &variableBaru : arraynya) { 
variable baru ? (mau di opeasikan apa ?);
cout << .... << .... << variableBaru << endl;

untuk operasi selajutnya maka nilai array akan mengacu pada operand atau statment sebelumnya
// dasar -45 ends //

// dasar - 46 starts //
multidimensional array build in

tata cara penulisan
manual

int namaArray [baris] [kolom] = {isinya , isinya , isiny , ...}

penngunaan variable baru di array yang mendefinisikan baris dan kolomnya harus konstan ddengan menggunkan variable const
// dasar -46 ends //

// dasar -47 starts //
array multidimensi dengan standard liblary
tata cara penulisan 

array < array <tipeData , kolom > , baris > namaarray = {isinya , ...}

pada print array multidimensi dengan standard liblary perlu lebih teliti agak tricky sedikit

const : berarti kosntan tidak akan berubah rubah 

const tipeData NamaVariable = isinya ;
const int nilai = 20;
const int baris = 10 ;

void pada array multi dimensi
void namaVaiabel (isinya dari array yang dideklarasi pada main >variableBaru)
// dasar -47 ends //

// dasar -48 starts //
sorting array
standard liblary array 
#include <algorithm>

standard liblary untuk algoritma dimana mencakup sorting array, search array dan masih banyak lagii 
// dasar -48 ends //

// dasar -49 starts //
search array
standard liblary daripada
#include <algorithm>

2 step untuk search array
1. sort data dulu
2. binary search

// dasar -49 ends // 

// dasar -50 starts //
introduce string

masih ada hubungannya dengan array
string adalah kumpulan character
standard liblary

#include <string>

string adalah sebuah char array dimana bisa dirubah datanya tanpa harus membuatnya seperti ini

int data;
cout << "masukkan kata" ; cin >> data;

cout << "kata yang anda masukkan adalah : " << data ;

menapilkan hasiil inputan anda

// dasar -50 ends //

// dasar -51 starts //
operasi pada string
1. mengambil karakter pad indeks
2. merubah kata 
3. menyambung kata
4. menempelkan kata

append berfungsi untuk menempelkan atau menambahkan kata pada variable tertentu yang dimau

cara penulisan

kata2.append(kata3)

// dasar -51 ends //

// dasar -52 starts //
komparasi atau perbandingan string

untuk komparasi string merupakan salah satu yang powerful untuk membandingkan kata atau kalimat dikarenakan string dapat membaca mulai dari kalimat yang sangat detail sekalipun


baik untuk mengolah kata-kata dan nama tetapi hanya bisa membaca 1 kata saja 
// dasar -52 ends //

// dasar -53 starts //
akses substring 


// dasar -53 ends //
