belajar c++ [ dasar ]
channel youtube kelas terbuka materi belajar c++

// dasar -3 starts //
#include <iostream> *header*
dinamakan include berfungsi untuk mengcopy semua yang ada di file dan langsung ditaruh di iostream itu sendiri.
dimana iostream berisi input output dimana akan di alirkan dan di tampilkan pada cmd

yang tidak akan di eksekusi 
1. line kosong
2. komentar (//)
3. multi line comment (/* ........ */)

main (){}
berfungsi dimana mesinn pertama kali mencari yang pertama kali di eksekusi diibaratkan pintu pada rumah

int main (){} pasangannya return 0; merupakan fungsi
int fungsi 
cout fungsi output

std::....
standard liblary dari iostream

endl
akhir spasi kebawah seperti \n
// dasar -3 end //

// dasar -4 starts //
penjelasan reprocessing linking and compiling.

compiling : file.exe

alurnya:
syntax/source code > reprocessing > compiling
untuk hanya 1 file

alurnya:
syntax/source code di compile masing-masing (reprocessing) > linking (menggambungkan setiap source code yang sudah di reprocessing seblumnya) > compiling (hasil compile smemua file)
// dasar -4 end //

// dasar -5 starts //
menggunakan aplikasi code blocks
mereview ulang cara compile link and reprocessing 
untuk penggunaan aplkasi sublime text, vs code ide 
untuk penggunaan dev c++ pada aplikasi diatas perlu, tetapi untuk penggunaan langsung menggunakan dev c++ biasa tidak. karena ,pada dev c++ biasa langsung otomatis di compiile and run secara langsung
// dasar -5 end // 

// dasar -6 start // 
int main (){
std::cout << "halo dunia" << std::end;
std::cin.get();
}
nb:
std berasal dari iostream
:: mengambil fungsi dari cout
<< "halo dunia" insertion memasukkan ke cout\
<< std::endl; insertion memasukkan ke hello dunia endl ( akhir dari baris )
std::cin untuk menginputkan
get(); untuk mengambil enter pada keyboard
return 0; untuk membuktikan ada error di syntax
"" diberi nama string atau text yang bisa di tampilkan ke cout
// dasar -6 end //

// dasar -7 starts //
menaruh apapun kedalam huruf atau kelas.
cara inialisasi.
tipe data , diikuti variabel.
contoh: int x; atau short x = 10;
cara deklarasi.
int i, int x int y short y dsb
// dasar -7 ends //

// dasar -8 starts //
fungsi using namespace std;
tidak perlu menulis std:: pada console
penulisan console cin atau cout.
cin >> ....;
cout << .....;
cara membaca cin kita masukkan data kedalam ....
// dasar -8 ends //

// dasar -9 starts //
tipe data.
tope data merupakan hal yang mendasar dalam c++ untuk mendeklarasikan variabel agar dibaca oleh komputer.
1 byte = 8 bit.
jumlah data yang bisa di tampung tipe data

macam - macam tipe data:
fundamental
1. short (16 bit)
2. int (32 bit) unsign (untuk meniadakan negatif)
3. long (64 bit)
ketiga diatas merupakan untuk bilangan bulat.
1. float ()
2. double ()
kedua diatas untuk bilangan berkoma atau decimal
1. char (8 bit)
diatas merupakan untuk bilangan berkarakter
1. boolean (1 byte)
diatas merupakan tipe data untuk menyatakan true atau false.

kumpulan karakter
1. string 
merupakan tipe data untuk kumpulan karakter 
// dasar -9 ends //

// dasar -10 starts //
untuk hasil dari opersi aritmatika agar menjadi koma memori yang ditaro salah satunya harus bertipe data float
dan modulus tidak bisa menggabungkan 2 tipe data
// dasar -10 ends //

// dasar -11 starts //
komparasi atau membandingkan 2 nilai baik sama dengan, kurang dari, lebih dari ,kurang dari sama dengan, lebih dari sama dengan, serta tidak sebanding
// dasar -11 ends //

// dasar -12 starts //
operator logika adalah operator yang di gunakan pada syntax 
not or and.
not (!)
menegasikan atau melawan.
and (&&)
kedua nilai yang benar hasilkan true
or (||)
salah satu nilainya true maka hasilnya true

NB 
untuk lebih jelas mengenai operator logika bisa pelajari materi aljabar boolean
// dasar -12 ends //

// dasar -13 starts //
if (kondisi){
statement
}

jika kondisi terpenuhi maka akan dijalankan statmentnya.
apabila kondisi tidak terpenuhi maka langsung menuju ke statment selanjutnya diluar if .
// dasar -13 ends //
// dasar -14 starts //
if else statement 
if (kondisi){
statement
} else {
statemnet
}

jika kondisi if terpenuhi maka else tidak di eksekusi.
jika kondisi if tidak terpenuhi maka dilanjutkan ke statment else.
// dasar -14 ends //

// dasar -15 starts //
switch case 
switch (kondisi/variable){
case 1: {
statement
break;
}
case 2: {
statement
break;
}

sama halnya dengan kondisi if else tetapi pada switch case mrubah kondisi / variable dengan bberapa case / kasus.
tanpa ada break semua case atau kasus akan di eksekusi 
fungsi break ialah untuk memberhentikan pada case yang terpenuhi dan mengabaikan case - case yang ada.
// dasar -15 ends //

// dasar -16 starts //
membuat kalkulator sederhana (selesai).
ubah menggunakan switch case.
// dasar -16 ends //

// dasar -17 stats //
assigment operator
mempermudah penulisan syntax yang pada awal mula
a = a + 3 ;
menjadi
a += 3 ;
a -= 3 ;
a /= 3 ;
a %= 3 ;
a *= 3 ;
// dasar -17 ends //

// dasar -18 starts //
increment dan decrement
increment 
pre dan post increment 
yang sebelumnya a = a + 1 disederhanakan menjadi a++ peningkatannya adalah 1 nilai
a++ = post increment (dibelakangnya) nambah 1 nilai
++a = pre incrememt (didepannya) nambah 1 nilai
increment apabila didalam fungsi maka 
post incremement
cout << a++ << endl; (di print dulu di a baru di tambahkan)
cout << a << endl; (ngeprint hasil fungsi diatas)
pre decrement 
cout << ++a << endl; (di tambahkan dulu baru di print a nya)
cout << a << endl; (di print hasil fungsi diatas)
decrement 
a--
--a
penjelasan mengenai decrement kebalikan dari incrment
// dasar -19 ends //

// dasar -20 stars //
while (syarat){aksi/syntax}
syarat dalam bentuk yes atau no dalam bentuk boolean
akan selalu looping apabila syarat selalu true(yes). maka perlu adanya batasan untuk membatasi loopingnya (no)
ada kemingkinan apabila syarat tidak terpenuhi maka tidak ada aksi yang dilakukan.
// dasar -20 ends //

// dasar -21 starts //
do while loop
do {aksi} while (syarat);
cara eksekusinya melakukan aksi akan dilakukan minimal 1 kali dulu baru di cek syaratnya
kesimpulannya:
bahwa do while apabila syaratnya sudah terpenuhi maka looping terus apabila syaratnya tidak terpenuhi maka tetep ngeprint yang di aksikan sebelumnya pada while minimal 1 kali.
// dasar -21 ends //

// dasar -22 starts //
for loop 
for (inisialisasi; loop kondisi; increment) {aksinya}
// dasr -22 ends //

